<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.leezu.mapper.userMapper">
	
	<!-- 회원가입 -->
	<insert id="userReg" parameterType="UserReg">
	<!--  0은 authority(관리자 : 1) 1은 emailchecked(이메일인증 : 1) -->
	insert into user
		values( #{userID},
				#{userPassword},
				#{userName},
				#{userEmail},
				'0',
				'1',
				current_timestamp)
	</insert>
	
	<!-- 로그인 -->
	<select id="userLogin" parameterType="User">
		select USERID, USERPASSWORD
			from user
		where	USERID = #{userID}
		and		USERPASSWORD = #{userPassword}
	</select>
	
	<!-- 아이디 체크 -->
	<select id="selectByID" resultType="User">
		select * from user
		where USERID = #{userID}
	</select>
	
	<!-- 회원 조회 -->
	<select id="userList" parameterType="Paging" resultType="User">
		select *
		from user
		<include refid="searchUser" />
		order by regDate DESC
		limit #{offset}, #{cntPerPage}
	</select>
	
	<sql id="searchUser">
	<choose>
		<when test="condition != null or condition eq ''">
			<if test="condition == 'id'">
				where userID like concat('%',#{keyword},'%')
					and authority = 0
			</if>
			<if test="condition == 'name'">
				where userName like concat('%',#{keyword},'%')
					and authority = 0
			</if>
			<if test="condition == 'idname'">
				where userID like concat('%',#{keyword},'%')
					or userName like concat('%',#{keyword},'%')
					and authority = 0
			</if>
			<if test="condition eq ''">
				where authority = 0
			</if>
		</when>
		<otherwise>
			where authority = 0
		</otherwise>
	</choose>
	</sql>

	<!-- 회원 정보 수정 -->
	<update id="modUser" parameterType="hashmap">
		update user
			set userName = #{modUser.userName},
				userEmail = #{modUser.userEmail},
				modDate = current_timestamp
			where userID = #{modUser.userID}
	</update>
	
	<!-- 회원 수 조회 -->
	<select id="getUserNum" resultType="int">
		select count(*)
		from user
		<include refid="searchUser" />
	</select>

<!-- 공지사항 -->	
	<!-- 공지사항 목록 조회 -->
	<select id="noticeList" parameterType="Paging" resultType="NoticeView">
		select @num:=@num+1 as num, n.*
		from (select * from notice order by noticeID) n, (select @num:=0) tmp
		<include refid="searchNotice" />
		order by num desc
		limit #{offset}, #{cntPerPage}
	</select>	
	
	<!-- 공지사항 개수 출력 -->
	<select id="getNoticeNum" resultType="int">
		select count(*)
		from notice
		<include refid="searchNotice" />
	</select>
	
	<sql id="searchNotice">
		<choose>
			<when test="condition != ''">
				<choose>
					<when test="condition == 'all'">
						where title like concat('%',#{keyword},'%')
						or content like concat('%',#{keyword},'%')
					</when>
					<otherwise>
						where ${condition} like concat('%',#{keyword},'%')
					</otherwise>
				</choose>
			</when>
			<otherwise>
				
			</otherwise>
		</choose>
	</sql>
	
	<!-- 공지사항 세부 조회 -->
	<select id="noticeById" parameterType="int" resultType="Notice">
		select *
		from notice
		where noticeID = #{noticeID}
	</select>
	
	<!-- 공지사항 등록 -->
	<insert id="regNotice" parameterType="preNotice">
		insert into notice(title, content, regDate, writerID)
			values( #{title},
					#{content},
					current_timestamp,
					#{writerID} )
	</insert>
	
	<!-- 공지사항 수정 -->
	<update id="modNotice" parameterType="Notice">
		update notice
			set title = #{title},
				content = #{content},
				modDate = current_timestamp
			where noticeID = #{noticeID}
	</update>
	
	<!-- 공지사항 삭제 -->
	<delete id="delNoticeById">
		delete
			from notice
			where noticeID = #{id}
	</delete>
	
	<!-- 공지사항 이전글 다음글 출력 -->
	<select id="getNext" parameterType="int" resultType="Notice">
		select *
			from notice
				<![CDATA[where noticeID = (select MIN(noticeID) from notice where noticeID > #{noticeID})]]>
	</select>
	<select id="getPre" parameterType="int" resultType="Notice">
		select *
			from notice
				<![CDATA[where noticeID = (select MAX(noticeID) from notice where noticeID < #{noticeID})]]>
	</select>
<!-- 개인 공지사항 -->
	<select id="getPrivateNotice" resultType="hashmap">
		select content
			from privateNotice
			where userID = #{userID}
	</select>
	
	<!-- 상품 삭제시 유저에게 기록 -->
	<insert id="alertDelProduct">
		insert into privateNotice (userID, content)
			select b.userID as userID,
				p.name as content
				from basket b, product p
				where b.productID = #{id}
					and p.productID = #{id}
	</insert>
<!-- 상품 -->	
	<!-- 상품 목록 조회 -->
	<select id="productList" resultType="Product">
		select *
		from product
		<include refid="searchProduct" />
		order by productID DESC
	</select>
	
	<sql id="searchProduct">
		<choose>
			<when test="size != 'all'">
				where size like #{size}
					and name like concat('%',#{keyword},'%')
					and price between #{minprice} and #{maxprice}
			</when>
			<otherwise>
				where name like concat('%',#{keyword},'%')
					and price between #{minprice} and #{maxprice}
			</otherwise>
		</choose>
	</sql>	
	
	<!-- 상품 갯수 -->
	<select id="getProductNum" resultType="int">
		select count(*)
		from product
	</select>
	
	<!-- 상품 등록 -->
	<insert id="regProduct" parameterType="preProduct">
		insert into product(name, price, description, size, imageUrl, ea)
			values(	#{name},
					#{price},
					#{description},
					#{size},
					#{imageUrl},
					#{ea})
	</insert>
	
	<!-- 상품 삭제 -->
	<delete id="delProductById" parameterType="int">
		delete
			from product
			where productID = #{id}
	</delete>

	
	<!-- 상품 아이디로 조회 -->
	<select id="getProduct" parameterType="int" resultType="Product">
		select *
		from product
		where productID = #{id}
	</select>
	
	<!-- 상품 변경 -->
	<update id="modProduct" parameterType="Product">
		update product
			set price = #{price},
				description = #{description},
				size = #{size},
				imageUrl = #{imageUrl},
				ea = #{ea}
			where productID = #{productID}
	</update>
	
	<!-- 상품 재고수량 수정 -->
	<update id="modProductCnt" parameterType="hashmap">
		update product
			set ea = ea - #{count}
			where productID = #{productID}
	</update>	
<!-- 장바구니 -->	
	<!-- 장바구니 등록 -->
	<insert id="addBasket" parameterType="hashmap">
		insert into basket(userID, productID, count)
			values( #{basket.userID},
					#{basket.productID},
					#{basket.count})
	</insert>
	
	<!-- 장바구니 목록 -->
	<select id="basketList" resultType="Basket">
		select 
			b.basketID as basketID,
			b.userID as userID,
			p.productID as productID,
			u.userName as userName,
			p.Name as productName,
			p.price as productPrice,
			b.count as count,
			(price * count) as total,
			b.regDate as regDate,
			b.modDate as modDate
		from 
			basket b, user u, product p
		where b.userID = #{userID}
			and p.productID = b.productID
			and u.userID = b.userID
		order by
			modDate DESC
	</select>
	
	<!-- 장바구니 확인 -->
	<select id="getBasketCount" resultType="Integer">
		select count as ea
			from basket
			where userID = #{userID}
				and productID = #{productID}
	</select>
	
	<!-- 장바구니 갯수 -->
	<select id="getBasketNum" resultType="int">
		select count(*)
			from basket
			where userID = #{userID}
	</select>
	<!-- 장바구니 갱신 -->
	<update id="modBasket" parameterType="hashmap">
		update basket
			set count = count + #{basket.count},
				modDate = current_timestamp
			where userID = #{basket.userID}
				and productID = #{basket.productID}
	</update>
	
	<!-- 장바구니 삭제_관리자 -->
	<delete id="delBasketByAdmin">
		delete 
			from basket
			where productID = #{id}
	</delete>
	
	<!-- 장바구니 아이디로 조회 -->
	<select id="getBasketByIds" resultType="Basket">
		select 
			b.basketID as basketID,
			b.userID as userID,
			p.productID as productID,
			u.userName as userName,
			p.Name as productName,
			p.price as productPrice,
			b.count as count,
			(price * count) as total
		from basket b, user u, product p
		where b.basketID in
		<foreach collection="array" item="item" open='(' close=')' separator=",">
			#{item}
		</foreach>
			and p.productID = b.productID
			and u.userID = b.userID
		order by basketID DESC
	</select>

	<!-- 장바구니 아이디로 삭제 -->
	<delete id="delBasketById" parameterType="int">
		delete
			from basket
			where basketID = #{basketID}
	</delete>

<!-- 주문 -->	
	<insert id="addOrder" parameterType="Order">

		insert into orderlist (orderID, productID, userID, dueDate, zipcode, address, state, count, total)
			values (#{orderID}, #{productID}, #{userID},
				date_add(now(), interval 4 day), #{zipcode}, #{address}, '주문 준비중', #{count}, #{total})
	</insert>
	
	<select id="getOrderCount" resultType="int">
		select count(*)
			from orderlist
	</select>
	
	<select id="getOrderList" resultType="Order">
		select 
			o.orderID as orderID,
			p.name as name,
			o.regDate as regDate,
			o.dueDate as dueDate,
			o.zipcode as zipcode,
			o.address as address,
			o.state as state,
			p.price as price,
			o.count as count,
			o.total as total,
			o.eval as eval,
			o.productID as productID
		from orderlist o, product p
		where o.userID = #{userID}
			and p.productID = o.productID
	</select>
	
	<select id="getOrderAllList" resultType="Order">
		select 
			o.orderID as orderID,
			p.name as name,
			u.userName as userName,
			o.regDate as regDate,
			o.dueDate as dueDate,
			o.zipcode as zipcode,
			o.address as address,
			o.state as state,
			p.price as price,
			o.count as count,
			o.total as total
		from orderlist o, product p, user u
		where p.productID = o.productID
			and u.userID = o.userID 
		order by orderID DESC
	</select>
	
	<select id="getOrderNum" resultType="int">
		select count(*)
			from orderlist
			where userID = #{userID}
	</select>
	
	<update id="modOrder" parameterType="hashmap">
		update orderlist
			set state = #{state}
			where orderID = #{orderID}
	</update>
	
	<update id="doEval" parameterType="String">
		update orderlist
			set eval = 'done'
			where orderID = #{orderID}
	</update>

<!-- 평가 -->
	<insert id="addEval" parameterType="Eval">
		insert into eval (orderID, userID, productID, content, evalRate)
			values (#{orderID}, #{userID}, #{productID}, #{content}, #{evalRate})
	</insert>
	
	<select id="getEvalList" resultType="Eval">
		select
			u.userName as userName,
			e.evalRate as evalRate,
			e.content as content
			from eval e, user u
			where e.productID = #{productID}
				and u.userID = e.userID
	</select>
</mapper>
